  

| **Concept**                       | **Description**                         | **Formula / Code**                     |
|-----------------------------------|-----------------------------------------|----------------------------------------|
| **Left Shift (`<<`)**             | Multiplies by \(2^k\)                   | `num << k` |
| **Right Shift (`>>`)**            | Divides by \(2^k\)                      | `num >> k` |
| **Get k-th Bit**                  | Extracts the k-th bit                   | `(num >> k) & 1` |
| **Set k-th Bit**                  | Turns the k-th bit to `1`               | `num | (1 << k)` |
| **Clear k-th Bit**                | Turns the k-th bit to `0`               | `num & ~(1 << k)` |
| **Toggle k-th Bit**               | Flips the k-th bit                      | `num ^ (1 << k)` |
| **Check if Power of Two**         | Only one bit is set                     | `n > 0 && (n & (n - 1)) == 0` |
| **Check if Power of Four**        | Power of two & `(n - 1) % 3 == 0`       | `n > 0 && (n & (n - 1)) == 0 && (n - 1) % 3 == 0` |
| **Find Missing Number**           | XOR cancels duplicates                  | `(XOR 0 to n) ^ (XOR of nums)` |
| **Subset Generation**             | Bitmasking to iterate over subsets      | `for (mask = 0; mask < (1 << n); mask++)` |
| **Count Set Bits**                | Counts `1`s in binary                   | `while (n) { n &= (n - 1); count++; }` |


Hereâ€™s a list of all the bitwise concepts and techniques we discussed in this chat:

---

### **1. Left Shift (`<<`) and Right Shift (`>>`)**
- **Left shift (`num << k`)** â†’ Multiplies `num` by \( 2^k \).
- **Right shift (`num >> k`)** â†’ Divides `num` by \( 2^k \), discarding remainder.
- **Example:**
  ```java
  int num = 5;  // 101 in binary
  System.out.println(num << 1); // 10 (Binary: 1010 â†’ 10)
  System.out.println(num >> 1); // 2  (Binary: 10 â†’ 2)
  ```

---

### **2. Getting the k-th Bit**
- **Formula:** `(num >> k) & 1`
- **Example:**
  ```java
  boolean getBit(int num, int k) {
      return ((num >> k) & 1) == 1;
  }
  
  System.out.println(getBit(5, 2)); // true (5 = 101 â†’ 2nd bit is 1)
  System.out.println(getBit(5, 1)); // false (5 = 101 â†’ 1st bit is 0)
  ```

---

### **3. Setting the k-th Bit**
- **Formula:** `num | (1 << k)`
- **Example:**
  ```java
  int setBit(int num, int k) {
      return num | (1 << k);
  }
  
  System.out.println(setBit(5, 1)); // 7 (101 â†’ Set 1st bit â†’ 111)
  ```

---

### **4. Checking if a Number is a Power of Two**
- **Formula:** `n > 0 && (n & (n - 1)) == 0`
- **Explanation:** 
  - Powers of 2 have only **one bit set** in binary.
  - `n - 1` flips all lower bits to `1`, and `n & (n - 1)` becomes `0`.
- **Example:**
  ```java
  boolean isPowerOfTwo(int n) {
      return (n > 0) && ((n & (n - 1)) == 0);
  }
  
  System.out.println(isPowerOfTwo(8));  // true (1000)
  System.out.println(isPowerOfTwo(10)); // false (1010)
  ```

---

### **5. Checking if a Number is a Power of Four**
- **Formula:** `n > 0 && (n & (n - 1)) == 0 && (n - 1) % 3 == 0`
- **Explanation:**
  - It must be a power of 2 (`(n & (n - 1)) == 0`).
  - Power of **4** numbers (1, 4, 16, ...) have `(n - 1) % 3 == 0`.
- **Example:**
  ```java
  boolean isPowerOfFour(int n) {
      return (n > 0) && ((n & (n - 1)) == 0) && ((n - 1) % 3 == 0);
  }
  
  System.out.println(isPowerOfFour(16)); // true (10000)
  System.out.println(isPowerOfFour(8));  // false (1000)
  ```

---

### **6. Finding the Missing Number Using XOR**
- **Formula:** `(XOR of numbers from 0 to n) ^ (XOR of array elements)`
- **Example:**
  ```java
  int missingNumber(int[] nums) {
      int n = nums.length;
      int xorAll = 0, xorNums = 0;
      
      for (int i = 0; i <= n; i++) xorAll ^= i; // XOR of 0 to n
      for (int num : nums) xorNums ^= num; // XOR of elements in array
      
      return xorAll ^ xorNums;
  }
  
  System.out.println(missingNumber(new int[]{3, 0, 1})); // 2
  ```
- **Explanation:**
  - Each number appears twice except the missing one.
  - XOR cancels out duplicates, leaving only the missing number.

---

### **7. Generating All Subsets Using Bitmasking**
- **Formula:** Iterate from `0` to `2^n - 1` and check bits.
- **Example:**
  ```java
  class Solution {
      public List<List<Integer>> subsets(int[] nums) {
          int n = nums.length;
          List<List<Integer>> result = new ArrayList<>();
          
          for (int mask = 0; mask < (1 << n); mask++) {
              List<Integer> subset = new ArrayList<>();
              
              for (int i = 0; i < n; i++) {
                  if ((mask & (1 << i)) != 0) {
                      subset.add(nums[i]);
                  }
              }
              
              result.add(subset);
          }
          return result;
      }
  }
  
  // Example:
  System.out.println(new Solution().subsets(new int[]{1,2,3}));
  ```
- **Explanation:**
  - Every subset corresponds to a binary number.
  - The **i-th bit** of `mask` tells whether to include `nums[i]`.

---

### **8. Checking if a Number has Only One Bit Set**
- **Formula:** `n > 0 && (n & (n - 1)) == 0`
- **Explanation:**
  - Works for **powers of 2**.
  - If `n & (n - 1) == 0`, `n` has only **one bit set**.
- **Example:**
  ```java
  boolean hasOneBitSet(int n) {
      return n > 0 && (n & (n - 1)) == 0;
  }

  System.out.println(hasOneBitSet(16)); // true
  System.out.println(hasOneBitSet(18)); // false
  ```

---

### **9. Toggling a Bit (Flipping)**
- **Formula:** `num ^ (1 << k)`
- **Example:**
  ```java
  int toggleBit(int num, int k) {
      return num ^ (1 << k);
  }
  
  System.out.println(toggleBit(5, 1)); // 5 (101) â†’ Flip 1st bit â†’ 7 (111)
  ```

---

### **10. Counting the Number of 1s in Binary (Hamming Weight)**
- **Formula:** `n & (n - 1)` reduces the number of 1s by 1 each time.
- **Example:**
  ```java
  int countSetBits(int n) {
      int count = 0;
      while (n > 0) {
          n &= (n - 1);
          count++;
      }
      return count;
  }
  
  System.out.println(countSetBits(7)); // 3 (111 â†’ 3 ones)
  ```

---

This summarizes everything we discussed. Let me know if you need a recap of anything! ðŸš€ðŸ”¥